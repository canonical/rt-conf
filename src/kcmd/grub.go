package kcmd

import (
	"fmt"
	"os"
	"strings"

	"github.com/canonical/rt-conf/src/model"
)

// UpdateGrub reads GRUB_CMDLINE_LINUX_DEFAULT from the default GRUB configuration file,
// merges it with the kernel command line parameters specified in the provided config,
// and writes the resulting command line to a drop-in configuration file for GRUB.
func UpdateGrub(cfg *model.InternalConfig) ([]string, error) {
	if len(cfg.Data.KernelCmdline.Parameters) == 0 {
		return nil, fmt.Errorf("no parameters to inject")
	}

	if err := cfg.Data.KernelCmdline.HasDuplicates(); err != nil {
		return nil, fmt.Errorf("invalid new parameters: %v", err)
	}

	cfg.GrubCfg.Cmdline = strings.Join(cfg.Data.KernelCmdline.Parameters, " ")

	if err := processFile(cfg.GrubCfg); err != nil {
		return nil, fmt.Errorf("error updating %s: %v", cfg.GrubCfg.CustomGrubFilePath, err)
	}

	return GrubConclusion(cfg.GrubCfg.CustomGrubFilePath, cfg.GrubCfg.Cmdline), nil
}

// processFile writes the GRUB configuration to the specified file.
var processFile = func(grub model.Grub) error {
	banner := "# This file is automatically generated by rt-conf, please do not edit\n"
	cmdline := fmt.Sprintf(`GRUB_CMDLINE_LINUX_DEFAULT="${GRUB_CMDLINE_LINUX_DEFAULT} %s"\n`, grub.Cmdline)

	content := banner + cmdline

	if err := os.WriteFile(grub.CustomGrubFilePath, []byte(content), 0o644); err != nil {
		return fmt.Errorf("failed to write to %s file: %v", grub.CustomGrubFilePath, err)
	}
	return nil
}
